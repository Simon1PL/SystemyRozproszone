@page "/fetchdatagrpc"
@inject WeatherForecast.WeatherForecastClient WeatherForecastsClient
@using System.Diagnostics;

<h1>GRPC-WEB</h1>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@name</p>
    <p>average time(100 attempts): @time</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.DateTimeStamp.ToDateTime()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private IList<WeatherInfo> forecasts;
    private string name;
    private TimeSpan time;

    protected override async Task OnInitializedAsync()
    {
        Stopwatch sw = new Stopwatch();
        WeatherReply response = null;
        for (int i = 0; i < 100; i++)
        {
            sw.Start();
            response = await WeatherForecastsClient.GetWeatherAsync(new WeatherRequest() { Name = "some name from request" });
            sw.Stop();
            time += sw.Elapsed;
        }
        time /= 100;
        forecasts = response.Forecasts;
        name = response.Name;
    }
}